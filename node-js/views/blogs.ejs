<%- include('header') %>
<div class="container-fluid">
    <!-- Comments Table Card -->
    <div class="card mb-4">
        <div class="card-header">
            <span><strong>Blogs</strong></span>
            <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#blogModal">
                <i class="fas fa-plus"></i> <!-- Font Awesome Plus Icon -->
            </button>
        </div>
        
        <div class="card-body">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Author</th>
                        <th>Date Created</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% blogs.forEach(blog => { %>
                    <tr>
                        <td><%= blog.title %></td>
                        <td><%= blog.author %></td>
                        <td><%= new Date(blog.created_at).toLocaleString("id-ID", { timeZone: "Asia/Jakarta" }) %></td>
                        <td>
                            <!-- View Button to open modal -->
                            <a class="btn btn-info btn-sm" target="_blank" href="/view-blog/<%= blog.blog_id %>">
                                <i class="fas fa-eye"></i> View
                            </a>
                            <!-- Edit Button -->
                            <button class="btn btn-warning btn-sm" onclick="openEditBlogModal('<%= blog.blog_id %>')">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <!-- Delete Button -->
                            <button class="btn btn-danger btn-sm" onclick="confirmDelete('<%= blog.blog_id %>')"> <!-- Confirm delete -->
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Blog Modal -->
<div class="modal fade" id="blogModal" tabindex="-1" aria-labelledby="blogModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="blogModalLabel">New Blog Post</h5>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
            <div class="modal-body">
                <form id="blogForm">
                    <!-- Title -->
                    <div class="mb-3">
                        <label for="title" class="form-label"><strong>Title</strong></label>
                        <input type="text" class="form-control" id="title" name="title" required>
                        <input type="hidden" id="blogIdInput" name="blogId">
                    </div>

                    <!-- Header Image Upload -->
                    <div class="mb-3">
                        <label for="headerImage" class="form-label"><strong>Header Image</strong></label>
                        <input type="file" class="form-control" id="headerImage" name="headerImage" accept="image/*">
                    </div>
                    <div class="mb-3">
                        <label for="title" class="form-label"><strong>Image From URL</strong></label>
                        <input type="text" class="form-control" id="imageURL" name="imageURL">
                    </div>
                    <div class="mb-3">
                        <label class="form-label"><strong>Image Preview</strong></label>
                        <div id="imagePreviewContainer">
                            <img id="imagePreview" src="" class="img-fluid d-none" alt="Image Preview" style="max-height: 200px;">
                        </div>
                    </div>

                    <!-- Quill.js Editor -->
                    <div class="mb-3">
                        <label class="form-label"><strong>Content</strong></label>
                        <div id="editor-container" style="height: 300px;"></div>
                    </div>

                    <!-- Alert Box -->
                    <div id="alert-box" class="alert d-none mt-3"></div>

                    <!-- Submit Button -->
                    <button type="submit" id="submitBtn" class="btn btn-success">Publish</button>
                </form>
            </div>
        </div>
    </div>
</div>
<!-- edit blog Modal -->
<div class="modal fade" id="editBlogModal" tabindex="-1" aria-labelledby="blogModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="blogModalLabel">Edit Blog</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="EditBlogForm">
                    <!-- Title -->
                    <div class="mb-3">
                        <label for="title" class="form-label"><strong>Title</strong></label>
                        <input type="text" class="form-control" id="editTitle" name="title" required>
                        <input type="hidden" id="editBlogId" name="editBlogId">
                        <input type="hidden" id="blogAuthor" name="author">
                    </div>

                    <!-- Quill.js Editor -->
                    <div class="mb-3">
                        <label class="form-label"><strong>Content</strong></label>
                        <div id="edit-editor-container" style="height: 300px;"></div>
                    </div>

                    <!-- Alert Box -->
                    <div id="edit-alert-box" class="alert d-none mt-3"></div>

                    <!-- Submit Button -->
                    <button type="submit" id="updateBtn" class="btn btn-success">Publish</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Initialize Quill.js Editor
    var quill = new Quill('#editor-container', {
    theme: 'snow',
    placeholder: 'Write your blog content here...',
    modules: {
        toolbar: [
            [{ 'header': [1, 2, false] }],
            ['bold', 'italic', 'underline'],
            ['blockquote', 'code-block'],
            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
            ['link', 'image']
        ]
    }
    });
    var quill2 = new Quill('#edit-editor-container', {
    theme: 'snow',
    placeholder: 'Write your blog content here...',
    modules: {
        toolbar: [
            [{ 'header': [1, 2, false] }],
            ['bold', 'italic', 'underline'],
            ['blockquote', 'code-block'],
            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
            ['link', 'image']
        ]
    }
    });
    document.getElementById('blogForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const title = document.getElementById('title').value;
        const content = quill.root.innerHTML;
        if(document.getElementById("headerImage").value){
            const imagePath = await uploadImage("file");
        }else if(document.getElementById("imageURL").value){
            const imagePath = await uploadImage("url");
        }else{
            alert("Please provide an image URL or upload an image file.");
            return;
        }
        const author = '<%= user_name %>';
        const requestData = { title, content, author, imagePath };
        const response = await fetch('/blogs', {
            method: 'POST',
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestData),
        });
        const data = await response.json();
        if (response.ok) {
            document.getElementById('alert-box').classList.remove('alert-danger');
            document.getElementById('alert-box').classList.add('alert-success');
            document.getElementById('alert-box').classList.remove('d-none');
            document.getElementById('alert-box').innerHTML = data.message;
            setTimeout(() => {
                window.location.reload();
            }, 2000);
        } else {
            document.getElementById('alert-box').classList.remove('alert-success');
            document.getElementById('alert-box').classList.add('alert-danger');
            document.getElementById('alert-box').classList.remove('d-none');
            document.getElementById('alert-box').innerHTML = data.message;
        }
    });
    document.getElementById("headerImage").addEventListener("change", function (event) {
        document.getElementById("imageURL").value = "";
        const file = event.target.files[0]; 
        const preview = document.getElementById("imagePreview");

        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                preview.src = e.target.result;
                preview.classList.remove("d-none"); 
            };
            reader.readAsDataURL(file); 
        } else {
            preview.src = "";
            preview.classList.add("d-none"); 
        }
    });

    document.getElementById("imageURL").addEventListener("input", function () {
        document.getElementById("headerImage").value = "";
        const url = this.value;
        const preview = document.getElementById("imagePreview");

        if (url) {
            preview.src = url;
            preview.classList.remove("d-none");
        } else {
            preview.src = "";
            preview.classList.add("d-none"); 
        }
    });

    async function uploadImage(uploadType){
        console.log(uploadType)
        if (uploadType === "url") {
            const image_url = document.getElementById("imageURL").value;
            const type = 'url';
            const response = await fetch("/blogs/upload-image", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ image_url, type }),
            });
            const data = await response.json();
            if (response.ok) {
                imagePath = data.imagePath;
                return imagePath
            } else {
                alert("Error uploading image: " + data.message);
            }
        }else if (uploadType === "file") {
            const imageFile = document.getElementById("headerImage").files[0];
            const formData = new FormData();
            formData.append("imageFile", imageFile);
            const response = await fetch("/blogs/upload-image", {
                method: "POST",
                body: formData,
            });
            const data = await response.json();
            if (response.ok) {
                imagePath = data.imagePath;
                return imagePath
            } else {
                alert("Error uploading image: " + data.message);
            }
        } 
    }
    // Function to open edit modal and populate fields
    async function openEditBlogModal(blogId) {
        try {
            const response = await fetch(`/blogs/${blogId}`);
            const blog = await response.json();

            if (!response.ok) throw new Error(blog.message || "Failed to fetch blog data");

            // Fill the form with the blog data
            document.getElementById("editBlogId").value = blog.blog_id;
            document.getElementById("editTitle").value = blog.title;
            document.getElementById("blogAuthor").value = blog.author;
            quill2.root.innerHTML = blog.content;

            // Show the modal
            var editBlogModal = new bootstrap.Modal(document.getElementById("editBlogModal"));
            editBlogModal.show();
        } catch (error) {
            console.error("Error loading blog:", error);
            alert("Error loading blog details. Please try again.");
        }
    }

    // Function to update the blog
    document.getElementById("EditBlogForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const blogId = document.getElementById("editBlogId").value;
        const title = document.getElementById("editTitle").value;
        const author = document.getElementById("blogAuthor").value;
        const content = quill2.root.innerHTML;

        const requestData = { title, author, content, blogId };

        try {
            const response = await fetch(`/blogs/update`, {
                method: "POST",
                body: JSON.stringify(requestData),
                headers: {
                    "Content-Type": "application/json",
                },
            });

            const data = await response.json();

            if (response.ok) {
                alert("Blog updated successfully!");
                location.reload(); // Refresh page after update
            } else {
                alert("Error updating blog: " + data.message);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Something went wrong. Try again.");
        }
    });
    async function confirmDelete(blogId) {
        if (!confirm("Are you sure you want to delete this blog? This action cannot be undone.")) {
            return;
        }

        try {
            const response = await fetch(`/blogs/delete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ blog_id: blogId })
            });

            const result = await response.json();

            if (response.ok) {
                alert("Blog deleted successfully!");
                window.location.reload(); // Refresh page after deletion
            } else {
                alert("Error: " + result.message);
            }
        } catch (error) {
            console.error("Error deleting blog:", error);
            alert("Failed to delete blog. Please try again.");
        }
    }
</script>

<%- include('footer') %>